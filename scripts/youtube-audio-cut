#!/usr/bin/env python3
"""
Turns an audio clip in a Youtube URL into an mp3 file.

Suggested installation of yt-dlp:
    $ pip install yt-dlp
"""

import argparse
import atexit
import subprocess
import os
import shutil

TMP_RAW_ORIGINAL = "/tmp/youtube-audio-cut-{}.original.mp3".format(os.getpid())
TMP_CUT = "/tmp/youtube-audio-cut-{}.cut.mp3".format(os.getpid())

def cleanup():
    # Delete temporary files if they exist
    if os.path.exists(TMP_RAW_ORIGINAL):
        os.remove(TMP_RAW_ORIGINAL)

    if os.path.exists(TMP_CUT):
        os.remove(TMP_CUT)

atexit.register(cleanup)

def main():
    parser = argparse.ArgumentParser(description="Process YouTube audio.")
    parser.add_argument("url", help="YouTube URL")
    parser.add_argument("start_time", help="Start time in HH:MM:SS format")
    parser.add_argument("end_time", help="End time in HH:MM:SS format")

    args = parser.parse_args()

    # Download the YouTube video as an audio file
    download_cmd = [
        "yt-dlp",
        "-o",
        TMP_RAW_ORIGINAL,
        "-x",
        "--audio-format",
        "mp3",
        "--audio-quality",
        "0",  # highest
        args.url,
    ]
    subprocess.run(download_cmd, check=True)

    # Use ffmpeg to cut the audio file
    ffmpeg_cmd = [
        "ffmpeg",
        "-i",
        TMP_RAW_ORIGINAL,
        "-ss",
        args.start_time,
        "-to",
        args.end_time,
        TMP_CUT,
    ]
    subprocess.run(ffmpeg_cmd, check=True)

    # Move the audio file to the current directory
    destination = os.getcwd() + "/audio-capture-cut.mp3"
    shutil.move(TMP_CUT, destination)
    print(f"Audio file saved to {destination}")

if __name__ == "__main__":
    main()
