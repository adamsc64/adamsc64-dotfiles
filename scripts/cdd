#!/usr/bin/env python3
"""
Prints the first directory inside current working directory
(recursively) that matches commandline argument. Prompts for
confirmation.

Example usage:
$ cd $(cdd mydirectory)  # will change to the output
"""
import argparse
import collections
import os


def get_index():
    index = "%s/index.txt" % os.getenv("PWD")
    index = os.path.expanduser(index)
    if not os.path.exists(index):
        raise FileNotFoundError(index)
    return index


def get_via_index():
    index = get_index()
    with open(index) as f:
        for path in f:
            path = path.strip()
            if os.path.isdir(path):
                yield path


def get_via_filesystem():
    for abspath in walk_dirs_bfs(os.getenv("PWD")):
        yield abspath


def walk_dirs_bfs(begin: str):
    queue = collections.deque([begin])
    while queue:
        current = queue.popleft()
        if os.path.isdir(current):
            try:
                queue.extend(
                    os.path.join(current, filename) for filename in os.listdir(current)
                )
            except PermissionError:
                pass
            yield current


def get_args():
    parser = argparse.ArgumentParser(
        description="Search for files in the current directory that end with a given suffix."
    )
    parser.add_argument("suffix", type=str, help="The suffix to search for.")
    parser.add_argument(
        "-n",
        "--num-matches",
        type=int,
        default=1,
        help="The maximum number of matches to print.",
    )
    parser.add_argument(
        "-t",
        "--type",
        type=str,
        choices=["d", "f", "*"],
        default="*",
        help="The type of file to search for (d = directory, f = file).",
    )
    parser.add_argument(
        "-i",
        "--insensitive",
        action="store_true",
        help="Whether to ignore case when searching.",
    )
    return parser.parse_args()


def main():
    suffix = args.suffix
    try:
        get_index()
        dirlist = get_via_index()
    except FileNotFoundError:
        dirlist = get_via_filesystem()
    num_matches = 0
    for line in dirlist:
        original_line = line
        line = line.strip()
        if args.insensitive:
            line = line.lower()
            suffix = suffix.lower()
        if not line.endswith(suffix):
            continue
        if args.type == "d" and not os.path.isdir(line):
            continue
        elif args.type == "f" and not os.path.isfile(line):
            continue
        print(original_line)
        num_matches += 1
        if num_matches >= args.num_matches:
            break


if __name__ == "__main__":
    args = get_args()
    main()
