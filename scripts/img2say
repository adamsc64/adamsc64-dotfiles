#!/Users/chris/virtualenvs/env3/bin/python
'''
Script to speak an image.

Installation:
    - Install tesseract:
    $ sudo apt-get install tesseract

    - Grab trained English data on Github:
    $ sudo wget \
          -P /opt/local/share/tessdata/ \
          https://github.com/tesseract-ocr/tessdata/raw/master/eng.traineddata

    - Install python libraries:
    $ pip install pytesseract pyttsx3
'''
import argparse
import os
import time

import pytesseract
from PIL import Image
import pyttsx3


def get_tesseract_cmd():
    'Get path where the tesseract module is installed'
    options = ('/opt/local/bin/tesseract', '/usr/local/bin/tesseract')
    for option in options:
        if os.path.exists(option):
            return option
    raise OSError('tesseract binary not found')


def extract(filename):
    print('Opening image...')
    img = Image.open(filename)
    print('Image information:')
    print('filename: {}'.format(img.filename))
    print('format: {}'.format(img.format))
    print('size: {}'.format(img.size))
    print('Converting image to string...')
    return pytesseract.image_to_string(img)


def say(result):
    print('Initializing speech engine...')
    engine = pyttsx3.init()
    engine.setProperty('rate', 300)
    print('Generating speech...')
    engine.say(result)
    print('Running speech engine...')
    engine.runAndWait()
    print('Finished speech.')


def process(filename, quiet, speak):
    result = extract(filename)
    if not quiet:
        print(result)
    if speak:
        say(result)


def main(args):
    print(f"filename={args.filename}")
    print(f"quiet={args.quiet}")
    print(f"speak={args.speak}")
    if not args.filename:
        return
    elif os.path.isfile(args.filename):
        process(args.filename, quiet=args.quiet, speak=args.speak)
    elif os.path.isdir(args.filename):
        print('Running in watch mode.')
        previous = set(os.listdir(args.filename))
        while True:
            time.sleep(.1)
            current = set(os.listdir(args.filename))
            extra = current.difference(previous)
            if not extra:
                continue
            previous = current
            for filename in extra:
                if filename.startswith('.'):
                    continue
                process(os.path.join(args.filename, filename),
                        quiet=args.quiet,
                        speak=args.speak,
                        )
            print('Continuing to run in watch mode.')

    print('Other file types not supported.')


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("filename", help="source image file or directory")
    parser.add_argument("--quiet", action="store_true", help="don't print result to stdout")
    parser.add_argument("--speak", action="store_true", help="speak result")
    return parser.parse_args()


if __name__ == '__main__':
    pytesseract.pytesseract.tesseract_cmd = get_tesseract_cmd()
    main(parse_args())
